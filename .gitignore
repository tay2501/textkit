# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# uv (Astral's fast Python package manager)
# https://docs.astral.sh/uv/
# For applications: commit uv.lock to ensure reproducible builds
# For libraries: you may choose to ignore uv.lock
# uv.lock
.python-version  # Personal Python version preference

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Rye (Another Python package manager)
.rye/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments and Sensitive Configuration
.env
.env.*
.envrc
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# API Keys and Credentials (Security Critical)
**/config/secrets.yml
**/config/credentials.yml
**/config/database.yml
**/config/application.yml
secrets.json
credentials.json
config.json
api_keys.txt
.secrets
.credentials

# SSH Keys and Certificates
*.pem
*.key
*.p12
*.pfx
*.crt
*.cer
id_rsa
id_dsa
id_ecdsa
id_ed25519
known_hosts
authorized_keys

# Cloud Provider Credentials
.aws/credentials
.aws/config
.azure/
.gcp/
gcloud/
.kube/config
docker/config.json

# Database Connection Strings
database.conf
db.conf
connection_string.txt

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be added to the global gitignore or merged into this project gitignore.  For PyCharm
#  Community Edition, use 'PyCharm CE'
.idea/

# Visual Studio Code
.vscode/

# Vim
*.swp
*.swo
*~

# Emacs
\#*\#
/.emacs.desktop
/.emacs.desktop.lock
*.elc
auto-save-list
tramp
.\#*

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# UV specific
# UV cache and temporary directories
.uv-cache/

# Project specific
# Polylith workspace artifacts
.polylith/

# Development tools cache
.ruff_cache/
.black_cache/

# Test artifacts
.coverage.*
test-results/
test-reports/

# Personal Development Environment Settings
.direnv/
.claude
.serena

# IDE and Editor Personal Settings
.vscode/settings.json
.vscode/launch.json
.vscode/tasks.json
.vscode/extensions.json
.idea/workspace.xml
.idea/tasks.xml
.idea/dictionaries/
.idea/shelf/

# Personal Git Configuration
.gitconfig.local
.gitmessage
.gitignore.local

# Personal Shell and Terminal Settings
.zshrc.local
.bashrc.local
.aliases
.profile.local
.zsh_history
.bash_history

# Personal Tool Configurations
.ripgreprc
.tigrc
.tmux.conf.local
.screenrc.local

# Personal Security Tools
.gnupg/
.ssh/config
.netrc

# Personal Backup and Temporary Files
*.backup
*.bak
*.orig
*.tmp
*~
.#*
#*#

# Database files
*.db
*.sqlite
*.sqlite3

# Log files
*.log
logs/

# Temporary files
tmp/
temp/
.tmp/

# Modern Python tooling
# Streamlit
.streamlit/

# Marimo
.marimo/

# Pixi package manager
.pixi/

# Pyright type checker
pyrightconfig.json