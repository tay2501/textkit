name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v1.0.0)'
        required: true
        type: string

permissions:
  contents: write
  packages: write
  pull-requests: read

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: "latest"
          enable-cache: true

      - name: Set up Python
        run: uv python install 3.12

      - name: Install dependencies
        run: |
          uv sync --all-extras --dev

      - name: Run tests
        run: |
          uv run --frozen pytest --cov=. --cov-report=term-missing

      - name: Run linting
        run: |
          uv run ruff check .
          uv run ruff format --check .

      - name: Type check
        run: |
          uv run mypy .

  build-artifacts:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    needs: validate-release
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: "latest"
          enable-cache: true

      - name: Set up Python
        run: uv python install 3.12

      - name: Build package
        run: |
          uv build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 30

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, build-artifacts]
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Get tag name
        id: tag_name
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "TAG_NAME=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Generate changelog
        id: changelog
        run: |
          # Get the previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 ${{ steps.tag_name.outputs.TAG_NAME }}^ 2>/dev/null || echo "")

          if [ -z "$PREVIOUS_TAG" ]; then
            CHANGELOG=$(git log --pretty=format:"* %s (%h)" ${{ steps.tag_name.outputs.TAG_NAME }})
          else
            CHANGELOG=$(git log --pretty=format:"* %s (%h)" ${PREVIOUS_TAG}..${{ steps.tag_name.outputs.TAG_NAME }})
          fi

          # Create changelog with proper formatting
          {
            echo "## Changes"
            echo ""
            echo "$CHANGELOG"
            echo ""
            echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/${PREVIOUS_TAG:-}...${{ steps.tag_name.outputs.TAG_NAME }}"
          } > changelog.md

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag_name.outputs.TAG_NAME }}
          release_name: Release ${{ steps.tag_name.outputs.TAG_NAME }}
          body_path: changelog.md
          draft: false
          prerelease: ${{ contains(steps.tag_name.outputs.TAG_NAME, 'alpha') || contains(steps.tag_name.outputs.TAG_NAME, 'beta') || contains(steps.tag_name.outputs.TAG_NAME, 'rc') }}

  upload-assets:
    name: Upload Release Assets
    runs-on: ubuntu-latest
    needs: create-release
    strategy:
      matrix:
        include:
          - pattern: "*.whl"
            content-type: "application/x-wheel+zip"
          - pattern: "*.tar.gz"
            content-type: "application/gzip"
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Upload Release Assets
        run: |
          for file in dist/${{ matrix.pattern }}; do
            if [ -f "$file" ]; then
              echo "Uploading $file"
              curl -L \
                -X POST \
                -H "Accept: application/vnd.github+json" \
                -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                -H "Content-Type: ${{ matrix.content-type }}" \
                "${{ needs.create-release.outputs.upload_url }}?name=$(basename $file)" \
                --data-binary "@$file"
            fi
          done

  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [validate-release, build-artifacts]
    if: startsWith(github.ref, 'refs/tags/v') && !contains(github.ref, 'alpha') && !contains(github.ref, 'beta') && !contains(github.ref, 'rc')
    environment:
      name: pypi
      url: https://pypi.org/project/textkit/
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          packages-dir: dist/